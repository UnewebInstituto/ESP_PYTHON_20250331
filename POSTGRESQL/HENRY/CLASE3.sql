-- ASOCIACIÓN ENTRE TABLAS CON ATRIBUTOS UPDATE CASCASDE DELETE CASCADE
-- SE TIENEN 2 TABLAS, PROVEEDORES Y PRODUCTOS, ESTA ÚLTIMA DEPENDE DE PROVEEDORES.
-- DEFINICIÓN DE PROVEEDORES:
CREATE TABLE PROVEEDORES1(
    id serial,
    nombre varchar(30),
    direccion text,
    telefono varchar(20),
    correo varchar(60),
    primary key(id)
);
CREATE TABLE PRODUCTOS1(
    id serial,
    proveedor_id integer,
    nombre varchar(30),
    precio numeric(13,2),
    existencia integer,
    primary key(id),
    foreign key(proveedor_id) references proveedores1(id) 
    on delete cascade on update cascade
);

-- CARGA DE DATOS
INSERT INTO PROVEEDORES1(nombre, direccion, telefono, correo)
VALUES
('GE','AV. LECUNA','+58 212 9876543','info@ge.com'),
('LG','AV. ROMULO GALLEGOS','+58 212 8876543','info@lg.com'),
('WHIRPOOL','AV. FCO. DE MIRANDA','+58 212 7876543','info@whirpool.com'),
('ELECTROLUX','AV. PPAL. DE LAS MERCEDES','+58 212 6876543','info@electrolux.com');

INSERT INTO PRODUCTOS1(proveedor_id, nombre, precio, existencia)
VALUES
(1,'NEVERA',500.25,12),
(1,'LAVADORA',300.75,6),
(1,'SECADORA',500.50,8),
(1,'CONGELADOR',200.25,3),
(2,'AIRE ACONDICIONADO',600,3),
(2,'COCINA ELECTRICA',250,6),
(2,'COCINA A GAS',175,9),
(2,'NEVERA',480,7),
(3,'LAVADORA',500,2),
(3,'HORNO ELECTRICO',350,3),
(3,'MICRO ONDAS',150,6),
(3,'CONGELADOR',250,3),
(4,'NEVERA',490,7),
(4,'HORNO A GAS',250,6),
(4,'SECADORA',550,5),
(4,'LAVADORA',450,6);

-- AL EXISTIR DEPEDENCIA ENTRE LAS TABLA, LAS SIGUIENTES ACCIONES
-- SE PUEDEN EFECTUAR:
-- 1-) SE PUEDE BORRAR UN REGISTRO DE LA TABLA PROVEEDORES1
--     SI, EXISTEN REGISTROS DEPENDIENTES EN LA TABLA PRODUCTOS
--     ESTOS TAMBIÉN SERÁN BORRADOS.
--     POR EJEMPLO:
DELETE FROM PROVEEDORES1 WHERE ID = 1;
-- 2-) SE PUEDE CAMBIAR EL VALOR DEL CAMPO ID EN LA TABLA PROVEEDORES1
--     GENERANDO LA ACTUALIZACIÓN DE ESTE CAMPO EN LA TABLA PRODUCTOS1
--     POR EJEMPLO:
UPDATE PROVEEDORES1 SET ID = 22 WHERE ID = 2;

-- CONSULTA COMBINADA DE TABLAS
-- SIN ALIAS
SELECT proveedores.nombre,
       proveedores.telefono,
       proveedores.correo,
       productos.nombre,
       productos.precio,
       productos.existencia 
       FROM proveedores, productos 
       WHERE productos.proveedor_id = proveedores.id;

-- EMPLEANDO ALIAS
SELECT A.nombre as proveedor,
       A.telefono,
       A.correo,
       B.nombre as producto,
       B.precio,
       B.existencia 
       FROM proveedores AS A, productos AS B
       WHERE B.proveedor_id = A.id;

-- CREACIÓN DE VISTA A PARTIR DE LAS CONSULTAS ANTERIORES
CREATE VIEW VISTA_PROV_PROD AS
SELECT A.nombre as proveedor,
       A.telefono,
       A.correo,
       B.nombre as producto,
       B.precio,
       B.existencia 
       FROM proveedores AS A, productos AS B
       WHERE B.proveedor_id = A.id;

-- LA VISTA QUE SE PRODUCE, VA A TENER LA ESTRUCTURA DE UNA TABLA
-- POR ENDE PUEDE EFCETUAR COMANDOS PROPIOS DE TABLA SOBRE ESTA.

SELECT * FROM VISTA_PROV_PROD;

-- ESTRUCTURA DE LA VISTA
\d VISTA_PROV_PROD;

-- VER LAS VISTAS CREADAS
\dv

-- COLUMNAS CALCULADAS
-- SON FUNCIONES QUE SE REALIZAN SOBRE COLUMNAS (CAMPOS) DE TABLAS
SELECT SUM()
SELECT MIN()
SELECT MAX()
SELECT AVG()
SELECT COUNT()
-- SUMATORIA
SELECT SUM(EXISTENCIA) FROM VISTA_PROV_PROD;
SELECT SUM(EXISTENCIA) AS TOTAL_EXISTENCIA FROM VISTA_PROV_PROD;
SELECT SUM(EXISTENCIA) AS "TOTAL EXISTENCIA" FROM VISTA_PROV_PROD;
-- PROMEDIO
SELECT AVG(PRECIO) FROM VISTA_PROV_PROD;
SELECT AVG(PRECIO) AS PROMEDIO FROM VISTA_PROV_PROD;
SELECT ROUND(AVG(PRECIO),2) AS PROMEDIO FROM VISTA_PROV_PROD;
-- MÍNIMO
SELECT MIN(PRECIO) FROM VISTA_PROV_PROD;
-- MÁXIMO
SELECT MAX(PRECIO) FROM VISTA_PROV_PROD;
-- CANTIDAD
SELECT COUNT(*) FROM VISTA_PROV_PROD;

-- FORMAS DE CONDICIONAMIENTO
SELECT * FROM VISTA_PROV_PROD WHERE proveedor = 'GE' AND precio >=500;

-- LISTA DE VALORES
SELECT proveedor, producto, precio FROM VISTA_PROV_PROD 
WHERE proveedor = 'GE' OR proveedor = 'LG';

-- EQUIVALENTE LISTA DE VALORES
SELECT proveedor, producto, precio FROM VISTA_PROV_PROD 
WHERE proveedor IN ('GE', 'LG');

-- RANGO DE VALORES
SELECT * FROM VISTA_PROV_PROD
WHERE PRECIO >= 500 AND PRECIO <= 1000;

-- EQUIVALENTE DE RANGO DE VALORES
SELECT * FROM VISTA_PROV_PROD
WHERE PRECIO BETWEEN 500 AND 1000;

-- NEGACIÓN



--TABLAS DE VERDAD
-- CONJUNCIÓN
-- P   Q   => P AND Q
-- V   V         V
-- V   F         F
-- F   V         F
-- F   F         F
--

-- DISYUNCIÓN
-- P   Q   => P OR Q
-- V   V         V
-- V   F         V
-- F   V         V
-- F   F         F

-- NEGACIÓN
-- P => NOT P
-- V      F
-- F      V

-- FORMAS DE CONDICIONAMIENTO
-----------
-- NEGACIÓN 
SELECT * FROM VISTA_PROV_PROD
WHERE NOT(proveedor = 'GE' AND precio >=500);

-- LISTA DE VALORES
SELECT proveedor, producto, precio FROM VISTA_PROV_PROD 
WHERE NOT (proveedor = 'GE' OR proveedor = 'LG');

-- EQUIVALENTE LISTA DE VALORES
SELECT proveedor, producto, precio FROM VISTA_PROV_PROD 
WHERE proveedor NOT IN ('GE', 'LG');

-- RANGO DE VALORES
SELECT * FROM VISTA_PROV_PROD
WHERE NOT (PRECIO >= 500 AND PRECIO <= 1000);

-- EQUIVALENTE DE RANGO DE VALORES
SELECT * FROM VISTA_PROV_PROD
WHERE PRECIO NOT BETWEEN 500 AND 1000;

-- CONSULTA APROXIMADA DEL CONTENIDO DE UN CAMPO
SELECT * FROM VISTA_PROV_PROD
WHERE producto LIKE '%COCINA%';

-- DIFERENCIA ENTRE ESPACIO EN BLANCO Y NULL
INSERT INTO CONTACTOS1(cedula, nombre, apellido)
VALUES ('V123','','');

SELECT * FROM CONTACTOS1;

SELECT * FROM CONTACTOS1 WHERE nombre = '';

SELECT * FROM CONTACTOS1 WHERE correo = '';

SELECT * FROM CONTACTOS1 WHERE correo IS NULL;

SELECT COUNT(*) FROM CONTACTOS1;

SELECT COUNT(CEDULA) FROM CONTACTOS1;

SELECT COUNT(NOMBRE) FROM CONTACTOS1;

SELECT COUNT(CORREO) FROM CONTACTOS1;




